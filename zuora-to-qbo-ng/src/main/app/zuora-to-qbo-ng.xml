<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:context="http://www.springframework.org/schema/context" xmlns:jdbc-ee="http://www.mulesoft.org/schema/mule/ee/jdbc" xmlns:scripting="http://www.mulesoft.org/schema/mule/scripting" xmlns:quickbooks="http://www.mulesoft.org/schema/mule/quickbooks" xmlns:vm="http://www.mulesoft.org/schema/mule/vm" xmlns:zuora="http://www.mulesoft.org/schema/mule/zuora" xmlns:objectstore="http://www.mulesoft.org/schema/mule/objectstore" xmlns:tracking="http://www.mulesoft.org/schema/mule/ee/tracking" xmlns="http://www.mulesoft.org/schema/mule/core" xmlns:doc="http://www.mulesoft.org/schema/mule/documentation" xmlns:spring="http://www.springframework.org/schema/beans" version="EE-3.5.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-current.xsd
http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
http://www.mulesoft.org/schema/mule/ee/tracking http://www.mulesoft.org/schema/mule/ee/tracking/current/mule-tracking-ee.xsd
http://www.mulesoft.org/schema/mule/objectstore http://www.mulesoft.org/schema/mule/objectstore/1.0/mule-objectstore.xsd
http://www.mulesoft.org/schema/mule/zuora http://www.mulesoft.org/schema/mule/zuora/1.0/mule-zuora.xsd
http://www.mulesoft.org/schema/mule/vm http://www.mulesoft.org/schema/mule/vm/current/mule-vm.xsd
http://www.mulesoft.org/schema/mule/quickbooks http://www.mulesoft.org/schema/mule/quickbooks/4.0/mule-quickbooks.xsd
http://www.mulesoft.org/schema/mule/scripting http://www.mulesoft.org/schema/mule/scripting/current/mule-scripting.xsd
http://www.mulesoft.org/schema/mule/ee/jdbc http://www.mulesoft.org/schema/mule/ee/jdbc/current/mule-jdbc-ee.xsd">
    <spring:beans>
        <spring:bean id="in.memory.store" class="org.mule.util.store.SimpleMemoryObjectStore"/>
        <spring:bean id="in.memory.retry.store" class="org.mule.util.store.SimpleMemoryObjectStore"/>
        <spring:bean id="error.store" class="org.mule.util.store.SimpleMemoryObjectStore"/>
        <spring:bean id="persistent.store" class="org.mule.util.store.PartitionedPersistentObjectStore"/>
    </spring:beans>
    <objectstore:config name="sync-control-objectsore" objectStore-ref="in.memory.store" doc:name="ObjectStore"/>
    <objectstore:config name="error-track-objectsore" objectStore-ref="error.store" doc:name="ObjectStore"/>
    <objectstore:config name="persistent-objectsore" objectStore-ref="persistent.store" doc:name="ObjectStore"/>
    <objectstore:config name="retry-objectsore" objectStore-ref="in.memory.retry.store" doc:name="ObjectStore"/>
    <zuora:config name="zuora-config" endpoint="${zuora_url}"   doc:name="Zuora">
        <zuora:connection-pooling-profile initialisationPolicy="INITIALISE_ONE" exhaustedAction="WHEN_EXHAUSTED_GROW"/>
    </zuora:config>
    <quickbooks:config name="quickbooks" consumerKey="${qb.consumer.key}" consumerSecret="${qb.consumer.secret}" verifyOpenIdResponse="false" doc:name="Quickbooks Online" objectStore-ref="${persistent.objectstore}"/>
	<custom-transformer name="zobject-to-map" class="com.mulesoft.zuora.qb.ZObjectListToMapTransformer" doc:name="Java"/>
    <jdbc-ee:mysql-data-source name="mysqldatasource" user="${db.user}" password="${db.password}" url="${db.url.ssl}" transactionIsolation="UNSPECIFIED" doc:name="MySQL Data Source"/>
    <jdbc-ee:connector name="jdbcConnector" dataSource-ref="mysqldatasource" validateConnections="true" queryTimeout="-1" pollingFrequency="0" doc:name="Database">
        <jdbc-ee:query key="insertTokenDate" value="INSERT INTO intuit_token_ref (realmid,createdate) values (#[variable:realmid], now()) ON DUPLICATE KEY UPDATE createdate=now()"/>
		<jdbc-ee:query key="expiringToken" value="select realmid from intuit_token_ref where realmid=${tenantId} and datediff(now(),createdate) > 151"/>
		<jdbc-ee:query key="tokenRefreshed" value="UPDATE intuit_token_ref set createdate=now() where realmid=${tenantId}"/>
		<jdbc-ee:query key="deleteToken" value="DELETE FROM intuit_token_ref where realmid=${tenantId}"/>
    </jdbc-ee:connector>
    <context:property-placeholder location="mule.${mule.env}.properties,common.properties,tenant.properties"/>
    <flow name="zuora-to-qbo-ng-flow" doc:name="zuora-to-qbo-ng-flow">
        <poll frequency="${zuora_poll}" doc:name="Poll">
        	<logger message="Waking up tenant ${tenantId}" level="DEBUG" doc:name="debugging"/>
        </poll>
        <vm:outbound-endpoint exchange-pattern="one-way" path="vm.zuora.core" doc:name="VM.core"/>
    </flow>
    <flow name="zuora-to-qbo-core" doc:name="zuora-to-qbo-core">
        <vm:inbound-endpoint exchange-pattern="one-way" path="vm.zuora.core" doc:name="VM.core"/>
       	<set-variable doc:name="zuora-user" value="${zuora_user}" variableName="zuora_user"/>
        <logger message="Checking #[flowVars['zuora_user']]" level="INFO" doc:name="user check"/>
        <expression-filter expression="#[flowVars['zuora_user'] != null and flowVars['zuora_user'] != '' and flowVars['zuora_user'].length() > 4]" doc:name="check-if-ready"/>
        <objectstore:retrieve config-ref="sync-control-objectsore" doc:name="check-if-in-sync" defaultValue-ref="#[false]" key="${tenantId}-in.sync"/>
        <choice doc:name="Choice">
            <when expression="#[payload == true]">
                <logger message="${tenantId} prior-sync still in progress" level="INFO" doc:name="prior-sync"/>
            </when>
            <otherwise>
                <objectstore:store config-ref="sync-control-objectsore" key="${tenantId}-in.sync" value-ref="#[true]" overwrite="true" doc:name="store-in-sync"/>
                <logger message="${tenantId} ${zuora_user} - start sync with cutover date ${cutoverdate}" level="INFO" doc:name="start-sync"/>
                <zuora:find config-ref="zuora-config"  doc:name="find-invoices" password="${zuora_password}" username="${zuora_user}" zquery="SELECT AccountID,Amount,CreatedDate,InvoiceNumber,InvoiceDate,DueDate,Comments FROM Invoice WHERE Status='Posted' AND TransferredToAccounting = null AND Amount > 0 AND InvoiceDate >= '${cutoverdate}'"/>
                <transformer ref="zobject-to-map" doc:name="zobject-to-map"/>
                <logger message="${tenantId} number of invoices #[payload.size()]" level="INFO" doc:name="number-of-invoices"/>
                <foreach doc:name="For Each">
                    <vm:outbound-endpoint exchange-pattern="request-response" path="vm.single.invoice" doc:name="vm.single.invoice"/>
                </foreach>
                <zuora:find config-ref="zuora-config"  doc:name="find-payments" password="${zuora_password}" username="${zuora_user}" zquery="SELECT AccountID,Amount,CreatedDate,EffectiveDate,PaymentNumber,SettledOn,Comment,Status,Type,QuickBooksPaymentId__c,ReferenceId, SecondPaymentReferenceId FROM Payment WHERE Status='Processed' AND TransferredToAccounting = null and Amount > 0  AND EffectiveDate >= '${cutoverdate}'"/>
                <transformer ref="zobject-to-map" doc:name="zobject-to-map"/>
                <logger message="${tenantId} number of payments #[payload.size()]" level="INFO" doc:name="number-of-payments"/>
                <foreach doc:name="For Each">
                    <vm:outbound-endpoint exchange-pattern="request-response" path="vm.single.payment" doc:name="vm.single.payment"/>
                </foreach>
                <objectstore:store config-ref="sync-control-objectsore" doc:name="set-insync-false" key="${tenantId}-in.sync" value-ref="#[false]" overwrite="true"/>
            </otherwise>
        </choice>
        <catch-exception-strategy doc:name="Catch Exception Strategy">
            <flow-ref name="exception-notification-flow" doc:name="exception-notification"/>
        </catch-exception-strategy>
    </flow>
</mule>
